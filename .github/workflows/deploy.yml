name: Deploy Instagram Auto Poster

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

env:
  DOCKER_IMAGE_NAME: instagram-auto-poster
  CONTAINER_NAME: instagram-auto-poster

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container \
          -p 5002:5002 \
          -e INSTAGRAM_USERNAME=test \
          -e INSTAGRAM_PASSWORD=test \
          -e VNC_PASSWORD=test123 \
          ${{ env.DOCKER_IMAGE_NAME }}:test
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:5002/health || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment package
      run: |
        # Create a deployment directory with all necessary files
        mkdir -p deploy-package
        
        # Copy all necessary files for deployment
        cp -r * deploy-package/ 2>/dev/null || true
        cp -r .env.example deploy-package/
        cp -r .dockerignore deploy-package/ 2>/dev/null || true
        
        # Create deployment archive
        tar -czf instagram-auto-poster-deploy.tar.gz -C deploy-package .
        
    - name: Copy deployment package to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || 22 }}
        source: "instagram-auto-poster-deploy.tar.gz"
        target: "/home/${{ secrets.VPS_USERNAME }}/"
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          cd /home/${{ secrets.VPS_USERNAME }}/
          
          # Create application directory if it doesn't exist
          mkdir -p instagram-auto-poster
          
          # Extract deployment package
          echo "Extracting deployment package..."
          tar -xzf instagram-auto-poster-deploy.tar.gz -C instagram-auto-poster/
          
          # Navigate to application directory
          cd instagram-auto-poster/
          
          # Verify essential files exist
          echo "Verifying deployment files..."
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Error: Dockerfile not found!"
            exit 1
          fi
          
          if [ ! -f "docker-compose.yml" ]; then
            echo "‚ùå Error: docker-compose.yml not found!"
            exit 1
          fi
          
          if [ ! -f "app.py" ]; then
            echo "‚ùå Error: app.py not found!"
            exit 1
          fi
          
          if [ ! -f "requirements.txt" ]; then
            echo "‚ùå Error: requirements.txt not found!"
            exit 1
          fi
          
          echo "‚úÖ All essential files verified"
          
          # Create .env file if it doesn't exist
          if [ ! -f .env ]; then
            echo "Creating .env file from template..."
            cp .env.example .env
            echo "‚ö†Ô∏è  IMPORTANT: Please edit .env file with your Instagram credentials!"
            echo "‚ö†Ô∏è  Default VNC password: instagram123"
          fi
          
          # Create necessary directories
          echo "Creating necessary directories..."
          mkdir -p content logs uploads
          
          # Set proper permissions
          chmod 755 content logs uploads
          
          # Stop existing container if running
          echo "Stopping existing containers..."
          docker-compose down || true
          
          # Remove old images to save space (keep last 2 versions)
          echo "Cleaning up old Docker images..."
          docker image prune -f || true
          
          # Build and start new container
          echo "Building and starting new containers..."
          docker-compose up -d --build
          
          # Wait for container to be healthy
          echo "Waiting for container to be healthy..."
          sleep 45
          
          # Check if container is running
          if docker-compose ps | grep -q "Up"; then
            echo "‚úÖ Deployment successful!"
            echo ""
            echo "üì± Instagram Auto Poster is running at:"
            echo "   üåê Web Interface: http://${{ secrets.VPS_HOST }}:5002"
            echo "   üñ•Ô∏è VNC Web Access: http://${{ secrets.VPS_HOST }}:6080"
            echo "   üîó Direct VNC: ${{ secrets.VPS_HOST }}:5901"
            echo ""
            echo "üîê Default VNC Password: instagram123"
            echo "‚öôÔ∏è  Configure your Instagram credentials at: http://${{ secrets.VPS_HOST }}:5002/settings"
            echo ""
            echo "üîß Useful commands:"
            echo "   Check status: docker-compose ps"
            echo "   View logs: docker-compose logs -f"
            echo "   Restart: docker-compose restart"
            echo ""
          else
            echo "‚ùå Deployment failed - container is not running"
            echo "Container status:"
            docker-compose ps
            echo ""
            echo "Container logs:"
            docker-compose logs
            exit 1
          fi
          
          # Cleanup deployment archive
          rm -f /home/${{ secrets.VPS_USERNAME }}/instagram-auto-poster-deploy.tar.gz 